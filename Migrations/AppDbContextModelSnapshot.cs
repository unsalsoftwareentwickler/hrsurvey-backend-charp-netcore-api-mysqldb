// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizplusApi.Models;

#nullable disable

namespace QuizplusApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("QuizplusApi.Models.Menu.AppMenu", b =>
                {
                    b.Property<int>("AppMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'17', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("IconClass")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MenuTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("AppMenuId");

                    b.ToTable("AppMenus", (string)null);

                    b.HasData(
                        new
                        {
                            AppMenuId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9499),
                            IconClass = "dashboard",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Dashboard",
                            SortOrder = 1,
                            Url = "/dashboard"
                        },
                        new
                        {
                            AppMenuId = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9505),
                            IconClass = "menu_open",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Menus",
                            SortOrder = 2,
                            Url = "/menu/menus"
                        },
                        new
                        {
                            AppMenuId = 3,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9507),
                            IconClass = "supervised_user_circle",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Roles",
                            SortOrder = 3,
                            Url = "/user/roles"
                        },
                        new
                        {
                            AppMenuId = 4,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9510),
                            IconClass = "mdi-account-multiple",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Users",
                            SortOrder = 4,
                            Url = "/user/users"
                        },
                        new
                        {
                            AppMenuId = 5,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9512),
                            IconClass = "category",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Category",
                            SortOrder = 5,
                            Url = "/question/category"
                        },
                        new
                        {
                            AppMenuId = 6,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9513),
                            IconClass = "emoji_objects",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Assessments",
                            SortOrder = 6,
                            Url = "/quiz/topics"
                        },
                        new
                        {
                            AppMenuId = 7,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9515),
                            IconClass = "help_center",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Questions",
                            SortOrder = 7,
                            Url = "/question/quizes"
                        },
                        new
                        {
                            AppMenuId = 8,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9516),
                            IconClass = "description",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Reports",
                            SortOrder = 8,
                            Url = "/report/students"
                        },
                        new
                        {
                            AppMenuId = 9,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9518),
                            IconClass = "card_giftcard",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "CertificateTemplate",
                            SortOrder = 9,
                            Url = "/report/certificates"
                        },
                        new
                        {
                            AppMenuId = 10,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9519),
                            IconClass = "settings",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "AppSettings",
                            SortOrder = 16,
                            Url = "/settings/appSettings"
                        },
                        new
                        {
                            AppMenuId = 11,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9521),
                            IconClass = "description",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "ExamineAndReports",
                            SortOrder = 10,
                            Url = "/report/admin"
                        },
                        new
                        {
                            AppMenuId = 12,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9522),
                            IconClass = "analytics",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Analytics",
                            SortOrder = 11,
                            Url = "/report/analysis"
                        },
                        new
                        {
                            AppMenuId = 13,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9524),
                            IconClass = "help_center",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "FAQ",
                            SortOrder = 12,
                            Url = "/settings/faq"
                        },
                        new
                        {
                            AppMenuId = 14,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9525),
                            IconClass = "contact_support",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Contacts",
                            SortOrder = 13,
                            Url = "/settings/contacts"
                        },
                        new
                        {
                            AppMenuId = 15,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9527),
                            IconClass = "payments",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Payments",
                            SortOrder = 14,
                            Url = "/settings/payments"
                        },
                        new
                        {
                            AppMenuId = 16,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9528),
                            IconClass = "monetization_on",
                            IsActive = true,
                            IsMigrationData = true,
                            MenuTitle = "Plans",
                            SortOrder = 15,
                            Url = "/settings/plans"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Menu.MenuMapping", b =>
                {
                    b.Property<int>("MenuMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'12', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AppMenuId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("MenuMappingId");

                    b.ToTable("MenuMappings", (string)null);

                    b.HasData(
                        new
                        {
                            MenuMappingId = 1,
                            AddedBy = 1,
                            AppMenuId = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9949),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 2,
                            AddedBy = 1,
                            AppMenuId = 2,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9954),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 3,
                            AddedBy = 1,
                            AppMenuId = 3,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9957),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 4,
                            AddedBy = 1,
                            AppMenuId = 4,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9959),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 10,
                            AddedBy = 1,
                            AppMenuId = 10,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9961),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 21,
                            AddedBy = 1,
                            AppMenuId = 13,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9963),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 22,
                            AddedBy = 1,
                            AppMenuId = 14,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9964),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 23,
                            AddedBy = 1,
                            AppMenuId = 15,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9966),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 24,
                            AddedBy = 1,
                            AppMenuId = 16,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9968),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 3
                        },
                        new
                        {
                            MenuMappingId = 11,
                            AddedBy = 1,
                            AppMenuId = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9969),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 2
                        },
                        new
                        {
                            MenuMappingId = 12,
                            AddedBy = 1,
                            AppMenuId = 8,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9971),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 2
                        },
                        new
                        {
                            MenuMappingId = 13,
                            AddedBy = 1,
                            AppMenuId = 12,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9972),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 2
                        },
                        new
                        {
                            MenuMappingId = 14,
                            AddedBy = 1,
                            AppMenuId = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9974),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 15,
                            AddedBy = 1,
                            AppMenuId = 4,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9976),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 16,
                            AddedBy = 1,
                            AppMenuId = 5,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9978),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 17,
                            AddedBy = 1,
                            AppMenuId = 6,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9979),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 18,
                            AddedBy = 1,
                            AppMenuId = 7,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9981),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 19,
                            AddedBy = 1,
                            AppMenuId = 11,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9983),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 20,
                            AddedBy = 1,
                            AppMenuId = 9,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9985),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        },
                        new
                        {
                            MenuMappingId = 25,
                            AddedBy = 1,
                            AppMenuId = 15,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(9986),
                            IsActive = true,
                            IsMigrationData = true,
                            UserRoleId = 1
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Others.BillingPayment", b =>
                {
                    b.Property<int>("BillingPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AssessmentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Interval")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("QuestionPerAssessmentCount")
                        .HasColumnType("int");

                    b.Property<int>("ResponsePerAssessmentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("StripeSessionId")
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("TransactionDetail")
                        .HasColumnType("longtext");

                    b.Property<string>("TransactionEmail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("BillingPaymentId");

                    b.ToTable("BillingPayments", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Others.BillingPlan", b =>
                {
                    b.Property<int>("BillingPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("AdditionalText")
                        .HasColumnType("longtext");

                    b.Property<int>("AssessmentCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("QuestionPerAssessmentCount")
                        .HasColumnType("int");

                    b.Property<int>("ResponsePerAssessmentCount")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("BillingPlanId");

                    b.ToTable("BillingPlans", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Others.Contacts", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Others.Faq", b =>
                {
                    b.Property<int>("FaqId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("FaqId");

                    b.ToTable("Faqs", (string)null);

                    b.HasData(
                        new
                        {
                            FaqId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 123, DateTimeKind.Local).AddTicks(2094),
                            Description = "Assess Hour will fulfill your need to take online Assessments,Exams,Quizes as well as surveys.",
                            IsActive = true,
                            IsMigrationData = true,
                            Title = "What are the purposes of this app?"
                        },
                        new
                        {
                            FaqId = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 123, DateTimeKind.Local).AddTicks(2100),
                            Description = "Nothing at all! You just need an active Email.",
                            IsActive = true,
                            IsMigrationData = true,
                            Title = "What will be requirements to take a Exam?"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Others.SiteSettings", b =>
                {
                    b.Property<int>("SiteSettingsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowFaq")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowRightClick")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowWelcomeEmail")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("AppBarColor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BodyColor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ClientUrl")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ContactUsEmail")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactUsTelephone")
                        .HasColumnType("longtext");

                    b.Property<string>("ContactUsText")
                        .HasColumnType("longtext");

                    b.Property<string>("CopyRightText")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Currency")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CurrencySymbol")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DefaultEmail")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<bool>("EndExam")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FaviconPath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("Feature1Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature1Header")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature2Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature2Header")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature3Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature3Header")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature4Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("Feature4Header")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterColor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FooterFacebook")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterInstagram")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterLinkedin")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterText")
                        .HasColumnType("longtext");

                    b.Property<string>("FooterTwitter")
                        .HasColumnType("longtext");

                    b.Property<string>("ForgetPasswordEmailBody")
                        .HasColumnType("longtext");

                    b.Property<string>("ForgetPasswordEmailHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("ForgetPasswordEmailSubject")
                        .HasColumnType("longtext");

                    b.Property<string>("HeaderColor")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("HomeBox1Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox1Header")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox2Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox2Header")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox3Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox3Header")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox4Detail")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeBox4Header")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeDetail1")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeDetail2")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeHeader1")
                        .HasColumnType("longtext");

                    b.Property<string>("HomeHeader2")
                        .HasColumnType("longtext");

                    b.Property<string>("Host")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("InvitationEmailBody")
                        .HasColumnType("longtext");

                    b.Property<string>("InvitationEmailHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("InvitationEmailSubject")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("LogoOnExamPage")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LogoPath")
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<bool>("PaidRegistration")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("Port")
                        .HasColumnType("int");

                    b.Property<int?>("RegistrationPrice")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationText")
                        .HasColumnType("longtext");

                    b.Property<string>("ReportEmailBody")
                        .HasColumnType("longtext");

                    b.Property<string>("ReportEmailHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("ReportEmailSubject")
                        .HasColumnType("longtext");

                    b.Property<string>("SiteTitle")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StripePubKey")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("StripeSecretKey")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.Property<string>("WelComeMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("WelcomeEmailBody")
                        .HasColumnType("longtext");

                    b.Property<string>("WelcomeEmailHeader")
                        .HasColumnType("longtext");

                    b.Property<string>("WelcomeEmailSubject")
                        .HasColumnType("longtext");

                    b.HasKey("SiteSettingsId");

                    b.ToTable("SiteSettings", (string)null);

                    b.HasData(
                        new
                        {
                            SiteSettingsId = 1,
                            AddedBy = 1,
                            AllowFaq = true,
                            AllowRightClick = true,
                            AllowWelcomeEmail = true,
                            AppBarColor = "#363636",
                            BodyColor = "#F9F9F9",
                            ContactUsEmail = "email@email.com",
                            ContactUsTelephone = "+xx (xx) xxxxx-xxxx",
                            ContactUsText = "Lorem ipsum dolor sit amet consectetur adipisicing elit. Iste explicabo commodi quisquam asperiores dolore ad enim provident veniam perferendis voluptate, perspiciatis. ",
                            CopyRightText = "© 2022 Assess Hour | All rights reserved",
                            Currency = "usd",
                            CurrencySymbol = "$",
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 123, DateTimeKind.Local).AddTicks(2477),
                            DefaultEmail = "",
                            EndExam = true,
                            FaviconPath = "",
                            Feature1Detail = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Feature1Header = "Experience a new horizon",
                            Feature2Detail = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Feature2Header = "Flexible question settings",
                            Feature3Detail = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Feature3Header = "justify your candidates",
                            Feature4Detail = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            Feature4Header = "Analyse your candidates",
                            FooterColor = "#FFFFFF",
                            FooterFacebook = "",
                            FooterInstagram = "",
                            FooterLinkedin = "",
                            FooterText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum. Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.",
                            FooterTwitter = "",
                            ForgetPasswordEmailBody = "Forget Password Body",
                            ForgetPasswordEmailHeader = "Forget Password Header",
                            ForgetPasswordEmailSubject = "Forget Password",
                            HeaderColor = "#F5F5F5",
                            HomeBox1Detail = "We help educators to measure & develop employability skills to ensure success in education, careers, and everyday life.",
                            HomeBox1Header = "Educators",
                            HomeBox2Detail = "Our online testing platform helps organisations determine whether their new and existing staff have the modern skills.",
                            HomeBox2Header = "Employers",
                            HomeBox3Detail = "Our online tests and assessments make it easier for training providers to recognize achievement.",
                            HomeBox3Header = "Training Providers",
                            HomeBox4Detail = "We enable associations to deliver reliable online assessments and successful certification programmes.",
                            HomeBox4Header = "Professional Bodies",
                            HomeDetail1 = "We believe that scientific assessment activities help create a fair and merit-based society. This is why we develop culturally appropriate assessments and tests for you.Measure your candidates skill on a way that is secure and robust.Then what are you waiting for?",
                            HomeDetail2 = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            HomeHeader1 = "Taking an assessment is always difficult!",
                            HomeHeader2 = "Online Assessment Platform for educational institutions, employers, training providers and professional bodies",
                            Host = "smtp.gmail.com",
                            InvitationEmailBody = "Invitation Body",
                            InvitationEmailHeader = "Invitation Header",
                            InvitationEmailSubject = "Invitation",
                            IsActive = true,
                            IsMigrationData = true,
                            LogoOnExamPage = true,
                            LogoPath = "",
                            PaidRegistration = true,
                            Password = "",
                            Port = 587,
                            RegistrationPrice = 0,
                            RegistrationText = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.",
                            ReportEmailBody = "N/A",
                            ReportEmailHeader = "Report Header",
                            ReportEmailSubject = "N/A",
                            SiteTitle = "Assess Hour",
                            StripePubKey = "",
                            StripeSecretKey = "",
                            Version = 1,
                            WelComeMessage = "Log in to get started.",
                            WelcomeEmailBody = "Welcome Body",
                            WelcomeEmailHeader = "Welcome Header",
                            WelcomeEmailSubject = "Welcome"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Question.QuestionCategory", b =>
                {
                    b.Property<int>("QuestionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QuestionCategoryName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.HasKey("QuestionCategoryId");

                    b.ToTable("QuestionCategories", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Question.QuestionLavel", b =>
                {
                    b.Property<int>("QuestionLavelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'4', '1', '', '', 'False', '1'");

                    b.Property<string>("QuestionLavelName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("QuestionLavelId");

                    b.ToTable("QuestionLavels", (string)null);

                    b.HasData(
                        new
                        {
                            QuestionLavelId = 1,
                            QuestionLavelName = "Easy"
                        },
                        new
                        {
                            QuestionLavelId = 2,
                            QuestionLavelName = "Medium"
                        },
                        new
                        {
                            QuestionLavelId = 3,
                            QuestionLavelName = "Hard"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Question.QuestionType", b =>
                {
                    b.Property<int>("QuestionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<string>("QuestionTypeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("QuestionTypeId");

                    b.ToTable("QuestionTypes", (string)null);

                    b.HasData(
                        new
                        {
                            QuestionTypeId = 1,
                            QuestionTypeName = "MCQ"
                        },
                        new
                        {
                            QuestionTypeId = 2,
                            QuestionTypeName = "Descriptive"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Question.QuizQuestion", b =>
                {
                    b.Property<int>("QuizQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("AnswerExplanation")
                        .HasColumnType("longtext");

                    b.Property<string>("CorrectOption")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsCodeSnippet")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OptionA")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionB")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionC")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionD")
                        .HasColumnType("longtext");

                    b.Property<string>("OptionE")
                        .HasColumnType("longtext");

                    b.Property<decimal>("PerQuestionMark")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("QuestionDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuestionLavelId")
                        .HasColumnType("int");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("QuizTopicId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNo")
                        .HasColumnType("int");

                    b.Property<string>("VideoPath")
                        .HasColumnType("longtext");

                    b.HasKey("QuizQuestionId");

                    b.ToTable("QuizQuestions", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.CertificateTemplate", b =>
                {
                    b.Property<int>("CertificateTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("longtext");

                    b.Property<string>("BackgroundImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("BottomMiddleImagePath")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Heading")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LeftSignatureImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("LeftSignatureText")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("MainText")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("PublishDate")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RightSignatureImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("RightSignatureText")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("TopLeftImagePath")
                        .HasColumnType("longtext");

                    b.Property<string>("TopRightImagePath")
                        .HasColumnType("longtext");

                    b.HasKey("CertificateTemplateId");

                    b.ToTable("CertificateTemplates", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.Instruction", b =>
                {
                    b.Property<int>("InstructionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("QuizTopicId")
                        .HasColumnType("int");

                    b.HasKey("InstructionId");

                    b.ToTable("Instructions", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizMarkOption", b =>
                {
                    b.Property<int>("QuizMarkOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<string>("QuizMarkOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("QuizMarkOptionId");

                    b.ToTable("QuizMarkOptions", (string)null);

                    b.HasData(
                        new
                        {
                            QuizMarkOptionId = 1,
                            QuizMarkOptionName = "Equal distribution"
                        },
                        new
                        {
                            QuizMarkOptionId = 2,
                            QuizMarkOptionName = "No marks(Survey)"
                        },
                        new
                        {
                            QuizMarkOptionId = 3,
                            QuizMarkOptionName = "Question wise set"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizParticipant", b =>
                {
                    b.Property<int>("QuizParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("QuizTopicId")
                        .HasColumnType("int");

                    b.HasKey("QuizParticipantId");

                    b.ToTable("QuizParticipants", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizParticipantOption", b =>
                {
                    b.Property<int>("QuizParticipantOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<string>("QuizParticipantOptionName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("QuizParticipantOptionId");

                    b.ToTable("QuizParticipantOptions", (string)null);

                    b.HasData(
                        new
                        {
                            QuizParticipantOptionId = 1,
                            QuizParticipantOptionName = "All registered candidates"
                        },
                        new
                        {
                            QuizParticipantOptionId = 2,
                            QuizParticipantOptionName = "Custom Input"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizPayment", b =>
                {
                    b.Property<int>("QuizPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("QuizTopicId")
                        .HasColumnType("int");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("QuizPaymentId");

                    b.ToTable("QuizPayments", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizResponseDetail", b =>
                {
                    b.Property<long>("QuizResponseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("AnswerExplanation")
                        .HasColumnType("longtext");

                    b.Property<string>("CorrectAnswer")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsAnswerSkipped")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExamined")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("QuestionDetail")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("QuestionMark")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("QuizQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizResponseInitialId")
                        .HasColumnType("int");

                    b.Property<string>("UserAnswer")
                        .HasColumnType("longtext");

                    b.Property<decimal>("UserObtainedQuestionMark")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("VideoPath")
                        .HasColumnType("longtext");

                    b.HasKey("QuizResponseDetailId");

                    b.ToTable("QuizResponseDetails", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizResponseInitial", b =>
                {
                    b.Property<int>("QuizResponseInitialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<int>("AttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsExamined")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal>("QuizMark")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("QuizPassMarks")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("QuizTime")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("QuizTopicId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("TimeTaken")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal>("UserObtainedQuizMark")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("QuizResponseInitialId");

                    b.ToTable("QuizResponseInitials", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.QuizTopic", b =>
                {
                    b.Property<int>("QuizTopicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<bool>("AllowCorrectOption")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowMultipleAnswer")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowMultipleAttempt")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowMultipleInputByUser")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowQuestionSuffle")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowQuizSkip")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AllowQuizStop")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Categories")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("CertificateTemplateId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRunning")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("QuizMarkOptionId")
                        .HasColumnType("int");

                    b.Property<int>("QuizParticipantOptionId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuizPassMarks")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("QuizPrice")
                        .HasColumnType("int");

                    b.Property<decimal>("QuizTime")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("QuizTitle")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<decimal>("QuizTotalMarks")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("QuizscheduleEndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("QuizscheduleStartTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("QuizTopicId");

                    b.ToTable("QuizTopics", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.Quiz.ReportType", b =>
                {
                    b.Property<int>("ReportTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<string>("ReportTypeName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("ReportTypeId");

                    b.ToTable("ReportTypes", (string)null);

                    b.HasData(
                        new
                        {
                            ReportTypeId = 1,
                            ReportTypeName = "Pending Examine"
                        },
                        new
                        {
                            ReportTypeId = 2,
                            ReportTypeName = "Reports"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.User.LogHistory", b =>
                {
                    b.Property<long>("LogHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<string>("Browser")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BrowserVersion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Ip")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LogCode")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("LogInTime")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LogOutTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Platform")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LogHistoryId");

                    b.ToTable("LogHistories", (string)null);
                });

            modelBuilder.Entity("QuizplusApi.Models.User.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'3', '1', '', '', 'False', '1'");

                    b.Property<int>("AddedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RoleDesc")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(8241),
                            DisplayName = "Admin",
                            IsActive = true,
                            IsMigrationData = true,
                            RoleDesc = "Application Admin",
                            RoleName = "Admin"
                        },
                        new
                        {
                            UserRoleId = 2,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(8273),
                            DisplayName = "Candidate",
                            IsActive = true,
                            IsMigrationData = true,
                            RoleDesc = "All Students",
                            RoleName = "Student"
                        },
                        new
                        {
                            UserRoleId = 3,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(8278),
                            DisplayName = "Super Admin",
                            IsActive = true,
                            IsMigrationData = true,
                            RoleDesc = "Application Super Admin",
                            RoleName = "SuperAdmin"
                        });
                });

            modelBuilder.Entity("QuizplusApi.Models.User.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("Npgsql:IdentitySequenceOptions", "'2', '1', '', '', 'False', '1'");

                    b.Property<int?>("AddedBy")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<int?>("BillingPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMigrationData")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StripeSessionId")
                        .HasMaxLength(800)
                        .HasColumnType("varchar(800)");

                    b.Property<string>("TransactionDetail")
                        .HasColumnType("longtext");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            AddedBy = 1,
                            DateAdded = new DateTime(2022, 12, 28, 14, 25, 2, 122, DateTimeKind.Local).AddTicks(8884),
                            Email = "superAdmin@assessHour.com",
                            FullName = "John Doe",
                            ImagePath = "",
                            IsActive = true,
                            IsMigrationData = true,
                            Password = "abcd1234",
                            UserRoleId = 3
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
